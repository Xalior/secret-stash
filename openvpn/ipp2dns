#!/usr/bin/python
import sys, logging
import os.path as op
from optparse import OptionParser
import ConfigParser

__version__ = '0.1'
logger = logging.getLogger('ipp2dns')

runtime = {}
hosts = {}

def main():
    global runtime
    usage = '%s [options] [source]' % sys.argv[0]
    parser = OptionParser(usage)

    parser.add_option('', '--out', default='-',
                      help='redirect output to this file (default: stdout)')
    parser.add_option('-v', '--verbose', default=False, action='store_true',
                      help='output more logs')
    parser.add_option('--debug', default=False, action='store_true',
                      help='show entire progress via "EVEN-MOAR" logs')

    parser.add_option('', '--version', default=False, action='store_true',
                      help='show ipp2dns version')

    opts, args = parser.parse_args()

    if opts.version:
        print 'ipp2dns', __version__
        sys.exit(0)

    if opts.debug:
        level = logging.DEBUG
    elif opts.verbose:
        level = logging.INFO
    else:
        level = logging.ERROR

    if opts.out == '-':
        logging.basicConfig(stream=sys.stderr, level=level)
    else:
        logging.basicConfig(filename=opts.out, level=level)

    for path in [op.abspath(op.dirname(__file__)), '/etc', op.join(op.expanduser('~'), '.ipp2dns')]:
        if path == []:
            path = ''
        if op.exists(op.join(path, 'ipp2dns.settings')):
            logger.debug("Found ipp2dns.settings in "+path)
            # load the settings, and keep looking for overriders....
            loadConfig(op.join(path, 'ipp2dns.settings'))
        logger.debug("Current config: "+str(runtime))
        logger.info("Finished looking in "+path);
    if runtime['dns.network']:
        runtime['dns.network']=eval(runtime['dns.network'])
    loadPool(runtime['source.ippool'])

def loadPool(filename):
    global hosts
    ipp = open(filename).read()
    for line in ipp.splitlines():
        logger.debug("IPPOOL entry: "+line)
        (host, fqip) = line.split(',')
        (q1, q2, q3, q4) = fqip.split('.')

        if runtime['destination.format'].lower()=='host':
            print q1+'.'+q2+'.'+q3+'.'+q4+" "+host+runtime['dns.network'][0]+runtime['dns.suffix']
            print q1+'.'+q2+'.'+q3+'.'+str(1+int(q4))+" "+host+runtime['dns.network'][1]+runtime['dns.suffix']
            print q1+'.'+q2+'.'+q3+'.'+str(2+int(q4))+" "+host+runtime['dns.network'][2]+runtime['dns.suffix']
            print q1+'.'+q2+'.'+q3+'.'+str(3+int(q4))+" "+host+runtime['dns.network'][3]+runtime['dns.suffix']
        elif runtime['destination.format'].lower()=='bind':
            print "bind"
        elif runtime['destination.format'].lower()=='rdns':
            print "rdns"

def loadConfig(filename):
    global runtime
    parser=ConfigParser.SafeConfigParser()
    parser.read([filename])
    logger.debug("config file contains sections: "+str(parser.sections()))
    for section in parser.sections():
        for option in parser.options(section):
            try:
                runtime[section+'.'+option] = parser.getint(section,option)
            except ValueError:
                runtime[section+'.'+option] = parser.get(section,option)
            logger.debug("loading "+option+" with "+runtime[section+'.'+option]+" as "+str(type(runtime[section+'.'+option])))

def writeLine(line):
    global runtime
    print 




if __name__ == '__main__':
    main()
